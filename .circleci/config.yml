---
version: 2.1

orbs:
  ruby: circleci/ruby@1.1.2
  node: circleci/node@4.1.0
  browser-tools: circleci/browser-tools@1.1.1

executors:
  rails_executor:
    working_directory: ~/vita-min
    docker:
      - image: cimg/ruby:2.7.2-browsers
        environment:
          PGHOST: 127.0.0.1
          PGUSER: root
          RAILS_ENV: test
          # Configure vita-min-specific class cache option; see config/environments/test.rb for details
          RAILS_CACHE_CLASSES: 1
      - image: circleci/postgres:9.6-alpine-postgis-ram
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: vita-min_test
        # Disable postgres durability features
        command: postgres -c fsync=off -c synchronous_commit=off -c full_page_writes=off -c random_page_cost=1.0

commands:
  install_app_dependencies:
    # Download packages with Ubuntu/Debian apt-get, using two performance optimizations.
    #
    # Cache apt-get's data, with a cache key of the current year and week. This means at the start of the
    # week, the apt-get cache will be rebuilt.
    #
    # Use 'unsafe i/o' for dpkg, a component of apt-get. This avoids filesystem syncs before renames; see
    # https://manpages.debian.org/buster/dpkg/dpkg.1.en.html . This is OK in circle-ci since its environments are ephemeral.
    description: "Install dependencies for specs"
    steps:
      - run:
          name: compute current year and week (used for apt caching)
          command: date +%Y-%m > tmp/year-and-week
      - run:
          name: set cache permissions so circleci can save/restore them, see https://discuss.circleci.com/t/unable-to-restore-bundle-from-cache-using-circleci-ruby-docker-images/24249
          command: sudo chown -R circleci.circleci /var/lib/apt /var/cache/apt
      - restore_cache:
          key: apt-cache-{{ checksum "tmp/year-and-week" }}
      - run:
          name: install dependencies
          command: |
            echo "force-unsafe-io" | sudo tee /etc/dpkg/dpkg.cfg.d/force-unsafe-io > /dev/null &&
            sudo apt-get update && \
            sudo apt-get install -y imagemagick pdftk ghostscript &&
            grep -q -F '<policy domain="coder" rights="none" pattern="PDF" />' /etc/ImageMagick-6/policy.xml && sudo rm /etc/ImageMagick-6/policy.xml # enable PDFs for convert, see https://imagemagick.org/script/security-policy.php
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          name: set cache permissions so circleci can save/restore them, see https://discuss.circleci.com/t/unable-to-restore-bundle-from-cache-using-circleci-ruby-docker-images/24249
          command: sudo chown -R circleci.circleci /var/lib/apt /var/cache/apt
      - save_cache:
          paths:
            - /var/lib/apt
            - /var/cache/apt
          key: apt-cache-{{ checksum "tmp/year-and-week" }}
jobs:
  run_i18n_tests_check_consistent_interpolations:
    executor: rails_executor
    steps:
      - checkout
      - ruby/install-deps
      - run:
          name: I18N check-consistent-interpolations
          command: bundle exec i18n-tasks check-consistent-interpolations
  run_i18n_tests_missing:
    executor: rails_executor
    steps:
      - checkout
      - ruby/install-deps
      - run:
          name: I18N missing
          command: bundle exec i18n-tasks bundle exec i18n-tasks missing
  run_i18n_tests_unused:
    executor: rails_executor
    steps:
      - checkout
      - ruby/install-deps
      - run:
          name: I18N unused
          command: bundle exec i18n-tasks unused
  run_ruby_tests:
    parallelism: 8
    executor: rails_executor
    steps:
      - checkout
      - install_app_dependencies
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bundle exec rails db:schema:load --trace
      - run:
          name: Build JS code
          command: bin/webpack --silent || { echo "Not running Rails tests due to webpack failure" ; exit 1; }
      - ruby/rspec-test
  run_js_tests:
    executor: rails_executor
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn
      - run:
          command: npm test --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/junit/
      - store_test_results:
          path: ~/reports/junit/
  deploy_to_aptible--demo:
    executor: rails_executor
    steps:
      - checkout
      - run: echo $APTIBLE_PUBLIC_KEY >> ~/.ssh/known_hosts
      - run: git fetch --depth=1000000
      - run: git push git@beta.aptible.com:vita-min-demo/vita-min-demo.git $CIRCLE_SHA1:master
    parallelism: 1
  deploy_to_aptible--production:
    executor: rails_executor
    steps:
      - checkout
      - run: echo $APTIBLE_PUBLIC_KEY >> ~/.ssh/known_hosts
      - run: git fetch --depth=1000000
      - run: git push git@beta.aptible.com:vita-min-prod/vita-min-prod.git $CIRCLE_SHA1:master
    parallelism: 1
workflows:
  version: 2
  build:
    jobs:
      - run_ruby_tests:
          filters:
            branches:
              ignore: /^main$/
      - run_js_tests:
          filters:
            branches:
              ignore: /^main$/
  build-and-deploy:
    jobs:
      - run_ruby_tests:
          filters:
            branches:
              only: main
      - run_js_tests:
          filters:
            branches:
              only: main
      - deploy_to_aptible--demo:
          requires: [run_js_tests, run_ruby_tests]
          filters:
            branches:
              only: main
  deploy-release-branch-to-production:
    jobs:
      - run_js_tests:
          filters:
            branches:
              only: release
      - run_ruby_tests:
          filters:
            branches:
              only: release
      - deploy_to_aptible--production:
          requires: [run_ruby_tests, run_ruby_tests]
          filters:
            branches:
              only: release
